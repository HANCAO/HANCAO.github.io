<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>英语口语101</title>
      <link href="/2020/03/10/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD101/"/>
      <url>/2020/03/10/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD101/</url>
      
        <content type="html"><![CDATA[<p>hello,world!</p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>“初步”接触.NET</title>
      <link href="/2020/03/07/%E2%80%9C%E5%88%9D%E6%AD%A5%E2%80%9D%E6%8E%A5%E8%A7%A6-NET/"/>
      <url>/2020/03/07/%E2%80%9C%E5%88%9D%E6%AD%A5%E2%80%9D%E6%8E%A5%E8%A7%A6-NET/</url>
      
        <content type="html"><![CDATA[<p>Long time no see. 初次接触.NET是学校教授C#语言时，提供.NET Framework下WinForm应用程序开发的实践。当时只觉得在Windows下和MFC开发无异，单纯的托控件，双击添加事件，只觉得无聊与混乱。可能是对技术的“花边”兴趣超越了深度编程，慢慢开始了解到.NET平台的丰富性。</p><a id="more"></a><p>.NET开发七龙珠：①桌面应用程序②移动端应用程序③Web端应用程序④云原生应用程序⑤物联网开发程序⑥人工智能⑦游戏开发。未来.NET Framework将和.NET Core合二为一统称.NET。故现在学习.NET Core貌似是正确的选择，毕竟跨平台。至于编程语言就选定“太子”C#。<br><br>近期的计划是突击Web端程序开发，及.NET Core中Asp.net Core框架。第一步基于传统MVC架构的Web应用，在之后尝尝鲜，基于Razor Pages的Web开发、交互式客户端 Web UI 的框架Blazor、数据访问EF Core，Web API、实时应用、远程过程调用应用就是后事了。万事开头难，尤其我对于B/S后端开发知之甚少，堪称绝对“小白”。<br><br>在之后的博客中，我会重点记录下，学习C#和ASP.NET Core MVC Web开发的点点滴滴Kindle时刻。希望持之以恒，逐步积累，提升技术硬实力。<br><br>It’s time to learn. 就先从ASP.NET Core开始，学习构建MVC架构的Web项目。<br></p><h5 id="ASP-NET-Core的启动过程"><a href="#ASP-NET-Core的启动过程" class="headerlink" title="ASP.NET Core的启动过程"></a>ASP.NET Core的启动过程</h5><p><img src="/images/Startup.png" alt="ASP.NET Core的启动过程"></p><h5 id="DependencyInjection-依赖注入框架"><a href="#DependencyInjection-依赖注入框架" class="headerlink" title="DependencyInjection/依赖注入框架"></a>DependencyInjection/依赖注入框架</h5>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将编程作为一种业余爱好</title>
      <link href="/2020/03/06/%E5%B0%86%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%BA%E4%B8%80%E7%A7%8D%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/"/>
      <url>/2020/03/06/%E5%B0%86%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%BA%E4%B8%80%E7%A7%8D%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/</url>
      
        <content type="html"><![CDATA[<p>好久没写博客了，先来介绍下此博客的现状：博客系统还是hexo提供，只不过部署系统由原来的Github Pages转为阿里云ECS，另外域名也由之前的二级域名 <a href="http://hschen.top">hschen.top</a>转而三级域名 <a href="http://blog.hschen.top" target="_blank" rel="noopener">blog.hschen.top</a>。前者是因为之前访问速度过于缓慢，后者则是由于博客系统的大众化促使我思考该构建怎样一个应用可以发挥技术的最大价值。之前记录的博文实属不堪，汇总到 <a href="https://blog.hschen.top/history.html" target="_blank" rel="noopener">历史</a> 页面，是时候有个新的开始了。</p><a id="more"></a><p>自大学开始接触编程，课内课外前前后后接触了不少技术，仅就编程语言而言有C、C++、C#、HTML/CSS、Javascript、Java、Python、PHP和Shell、SQL。可构建的程序包括桌面端、移动端、Web端应用以及系统运维方面。在此作简单回忆：C和C++前期一直是用作练习语言基础和算法的工具，可惜，没投入足够的时间，尽管之后重拾信息再次学习也往往半途而废（学习C++也是学习面向对象编程的开始，为之后深入学习编程埋下伏笔）。初次接触桌面端程序是使用C++的MFC框架构建的，此时还没有使用到数据库，但实现的还是CURD，编程过程就是往返于实验室和图书馆，东抄抄西搬搬，整个一豆腐渣工程。在之后就是学习前端知识，刚开始天真的以为仅HTML和CSS就可以实现整个web应用，于是耗费大量时间跟着网上的教程“大礼包”实现了一个前端页面，当时觉得颇为有趣，现在看来真是走错了路。再然后便是基于C#语言的.NET FrameWork构建Windows平台的桌面程序，在此过程中接触到SQL Server数据库，虽然有部分提及到网络Socket编程，但总体还是CURD。学校开设的第一堂Java课，我并没有参加，当时只觉得选Java不怎么“酷”。当然现实打了我的脸,错误的认为编程语言课只教授语言层次，殊不知老师还会提及其生态。于是下学期教授Java Web时，我便迅速参加，课堂上老师会介绍有关Web程序的方方面面，比如get、post,cookie,session等相关浏览器领域知识，还有MySql数据库等等B/S系统应该注意的地方。有关Java，后期跟着学校选修了Android，先是跟着谷歌官方文档走了半截，然后是老师的教授，课堂结束，仍旧浅尝辄止无所获。学校未教授Python的课程，于是很多同学在业余时间学习，我也不例外在语言语法关过后，先后了解过Python爬虫、Web端开发，也没有深入。我想学习一门新语言，想要快速牢靠的掌握，还得通过刷题巩固，而不是直接前往应用的大门。再之后，学校教程PHP我仍然没有选，课程同时涉及了云服务器部署及Git版本控制系统，其实有点遗憾。不过对应学期的Oracle数据库课程设计，倒是使用了PHP,仍旧是网上教程看着打下来的。到目前为止，与入学伊始的种种幻想都渐行渐远，逻辑什么的令人头痛，说实话我也没有勇气认真对待，付出百分百的精神去面对过这一切。作为一名计算机科班学生，实属遗憾。<br><br>那不做开发，毕业后又怎么就业？通过网上资料查询，我了解到运维，包括网络运维、系统运维、数据库运维以及大数据云计算，与开发一一对应的岗位。同时了解到相关的职业认证和系统知识，颇为复杂。思索一番，投身于Linux系统运维，此为后事，暂且不叙。<br><br>临近毕业，碍于毕业设计，必须重新扛起开发的大旗，前后辗转，做出决定 - - 将编程作为一种业余爱好。这样压力会小一点，仅此而已。至于技术栈就选择.NET，接下来先打牢C#的基础，然后学习.net core方面asp.net core MVC web应用。过程中最好能够重新学习下数据结构和算法，多多刷题，培养自己的逻辑能力。再然后充分利用.net core平台的优越性发展各类应用程序技能，无论桌面端、移动端、web端，云计算、物联网还是大数据、AI，也不枉我所谓科班。任重道远，切记不可半途而废。</p>]]></content>
      
      
      <categories>
          
          <category> Overview </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
