<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git之“鸡毛蒜皮”</title>
      <link href="/2020/03/13/Git%E4%B9%8B%E2%80%9C%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E2%80%9D/"/>
      <url>/2020/03/13/Git%E4%B9%8B%E2%80%9C%E9%B8%A1%E6%AF%9B%E8%92%9C%E7%9A%AE%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<p>这篇博文将会陆续记录我在使用Git过程出现的不知所以然的问题，以及相对应的解决方案。希望再次遇到问题时能够一眼定位，从容解决。</p><a id="more"></a><h4 id="Question"><a href="#Question" class="headerlink" title="Question"></a>Question</h4><h5 id="环境描述：本地Windows平台使用hexo搭建静态博客页面，部署同步到Github上。云服务器Linux平台，拉取Github仓库文件，页面展示到指定网站。现在疑惑是页面展示出现诸如：“-lt-lt-lt-lt-lt-lt-lt-HEAD-XXX-gt-gt-gt-gt-gt-gt-gt-e8510dbe…-”的Git输出。其中XXX是新作的改动。"><a href="#环境描述：本地Windows平台使用hexo搭建静态博客页面，部署同步到Github上。云服务器Linux平台，拉取Github仓库文件，页面展示到指定网站。现在疑惑是页面展示出现诸如：“-lt-lt-lt-lt-lt-lt-lt-HEAD-XXX-gt-gt-gt-gt-gt-gt-gt-e8510dbe…-”的Git输出。其中XXX是新作的改动。" class="headerlink" title="环境描述：本地Windows平台使用hexo搭建静态博客页面，部署同步到Github上。云服务器Linux平台，拉取Github仓库文件，页面展示到指定网站。现在疑惑是页面展示出现诸如：“&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD =======XXX&gt;&gt;&gt;&gt;&gt;&gt;&gt; e8510dbe… =======”的Git输出。其中XXX是新作的改动。"></a>环境描述：本地Windows平台使用hexo搭建静态博客页面，部署同步到Github上。云服务器Linux平台，拉取Github仓库文件，页面展示到指定网站。现在疑惑是页面展示出现诸如：“&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD =======XXX&gt;&gt;&gt;&gt;&gt;&gt;&gt; e8510dbe… =======”的Git输出。其中XXX是新作的改动。</h5><p>由于本地使用hexo，博客项目文件所在目录不是git目录，提交直接使用hexo d到仓库master分支下。而在服务器端，是直接git clone下仓库文件，以下是服务器端git分支情况。</p><p><img src="/images/gitbranch.png" alt="gitbranch"></p><p>还有一点必须要提下，服务器端拉取下的仓库文件 包含于 Github仓库文件，即前者文件数量是多于后者的，而又不能简单的将前者的文件git push到Github仓库中，因为本地重新执行hexo g &amp;&amp; hexo d时会再次生成项目文件，即“复原”。</p><h4 id="Answer"><a href="#Answer" class="headerlink" title="Answer"></a>Answer</h4><h5 id="目前还没有找到解决方法，猜测是git分支方面的问题，服务器端拉取仓库文件时临时创建了一个新的分支，本地一直以来是上传文件到master上的。"><a href="#目前还没有找到解决方法，猜测是git分支方面的问题，服务器端拉取仓库文件时临时创建了一个新的分支，本地一直以来是上传文件到master上的。" class="headerlink" title="目前还没有找到解决方法，猜测是git分支方面的问题，服务器端拉取仓库文件时临时创建了一个新的分支，本地一直以来是上传文件到master上的。"></a>目前还没有找到解决方法，猜测是git分支方面的问题，服务器端拉取仓库文件时临时创建了一个新的分支，本地一直以来是上传文件到master上的。</h5><p>本来使用hexo部署静态博客是件很简单的是，现在却越搞越复杂了。</p>]]></content>
      
      
      <categories>
          
          <category> Solutions </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>英语口语101</title>
      <link href="/2020/03/10/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD101/"/>
      <url>/2020/03/10/%E8%8B%B1%E8%AF%AD%E5%8F%A3%E8%AF%AD101/</url>
      
        <content type="html"><![CDATA[<p>英语学习听说读写之说，口语表达的意义是否局限在与外国人交谈，貌似目前的学习成长驱动力仅仅在于未来假使出国，能够满足基本的现代生活需求。去外企？考证留学？有点遥远。但我相信学习是相辅相成的，口语这点可以及格，英语学习的其他方面也可以有所进步的吧。</p><a id="more"></a><p><img src="/images/oralenglish.png" alt="oralenglish"></p><h4 id="1-中式英语修正"><a href="#1-中式英语修正" class="headerlink" title="1. 中式英语修正"></a>1. 中式英语修正</h4><h6 id="中英差异"><a href="#中英差异" class="headerlink" title="中英差异"></a>中英差异</h6><p>一句话中文较“灵活”，英文更“严谨”。发音方面，英语相较中文口腔位置要靠后。</p><h6 id="过往纠错"><a href="#过往纠错" class="headerlink" title="过往纠错"></a>过往纠错</h6><table><thead><tr><th>单词</th><th>发音</th><th>语音现象</th></tr></thead><tbody><tr><td>‘ve</td><td>wu</td><td>连读</td></tr><tr><td>and</td><td>an</td><td>失去爆破</td></tr><tr><td>it/got/right/…</td><td>i/嘎/righ</td><td>失去爆破</td></tr><tr><td><br></td><td></td><td></td></tr></tbody></table><h6 id="can-和-can’t"><a href="#can-和-can’t" class="headerlink" title="can 和 can’t"></a>can 和 can’t</h6><p>发音时如何区分两者，以及如何正确发声？can’t 由于失去爆破在发声时，会“失去”’t 导致与 can 发音相同。<br><br>要点①重音位置的不同，否定形式重音赋予 can’t ;肯定形式重音赋予can后面紧跟着的单词。<br>要点②语调不同：否定形式can读作升调↗；肯定形式读作降调↘。<br></p><blockquote><p>I <strong>can’t</strong> make it. 和 I can <strong>make</strong> it.<br>It can’t↗ happen. 和 Yes, we can↘.</p></blockquote><h6 id="怎么理解连读"><a href="#怎么理解连读" class="headerlink" title="怎么理解连读"></a>怎么理解连读</h6><p>现阶段我所理解的连读就是将两个要连读的单词当作一个单词去读，不存在停顿，并且在两个单词之间添加些额外的奇奇怪怪的声音。<br></p><blockquote><table><thead><tr><th>短语发音</th><th>连读规则</th></tr></thead><tbody><tr><td>for (rui) example</td><td></td></tr><tr><td>in (na) other</td><td></td></tr><tr><td>but (tai) I</td><td></td></tr></tbody></table></blockquote><h6 id="怎么理解失去爆破"><a href="#怎么理解失去爆破" class="headerlink" title="怎么理解失去爆破"></a>怎么理解失去爆破</h6><p>连读是单词与单词之间，而失爆在于将当前单词末尾音节不发声（做出嘴型，不发声，简单停顿）。这里的音节也就是所谓辅音分类中的爆破音。</p><h4 id="2-发音要标准"><a href="#2-发音要标准" class="headerlink" title="2. 发音要标准"></a>2. 发音要标准</h4><p><img src="/images/%E5%85%83%E9%9F%B3%E5%92%8C%E8%BE%85%E9%9F%B3.png" alt="元音和辅音"><br>不管是元音还是辅音，舌头和口腔都应该摆在正确的位置，口语表达准确的第一步应该还是先读准单词，其次关注语音现象。</p><h5 id="元音"><a href="#元音" class="headerlink" title="元音"></a>元音</h5><p>元音即发声不受口腔阻碍，具体原则要做到口腔位置保持立体饱满，发音时要有紧绷的感觉。</p><h6 id="长短元音的区别"><a href="#长短元音的区别" class="headerlink" title="长短元音的区别"></a>长短元音的区别</h6><p>长音相较短元音口腔位置和发声时长，要扩大和延长一半。</p><blockquote><p>bad 和 bed <br></p></blockquote><h5 id="辅音"><a href="#辅音" class="headerlink" title="辅音"></a>辅音</h5><h6 id="清浊辅音的区别"><a href="#清浊辅音的区别" class="headerlink" title="清浊辅音的区别"></a>清浊辅音的区别</h6><p>清辅音发音时声带不震动，浊辅音震动。</p><h6 id="开口音和闭口音的区别"><a href="#开口音和闭口音的区别" class="headerlink" title="开口音和闭口音的区别"></a>开口音和闭口音的区别</h6><p>开口音发音时嘴唇一定要张开，闭口音要闭上。</p><h4 id="3-英音-VS-美音"><a href="#3-英音-VS-美音" class="headerlink" title="3. 英音 VS 美音"></a>3. 英音 VS 美音</h4>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> English </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>“初步”接触.NET</title>
      <link href="/2020/03/07/%E2%80%9C%E5%88%9D%E6%AD%A5%E2%80%9D%E6%8E%A5%E8%A7%A6-NET/"/>
      <url>/2020/03/07/%E2%80%9C%E5%88%9D%E6%AD%A5%E2%80%9D%E6%8E%A5%E8%A7%A6-NET/</url>
      
        <content type="html"><![CDATA[<p>Long time no see. 初次接触.NET是学校教授C#语言时，提供.NET Framework下WinForm应用程序开发的实践。当时只觉得在Windows下和MFC开发无异，单纯的托控件，双击添加事件，只觉得无聊与混乱。可能是对技术的“花边”兴趣超越了深度编程，慢慢开始了解到.NET平台的丰富性。</p><a id="more"></a><p>.NET开发七龙珠：①桌面应用程序②移动端应用程序③Web端应用程序④云原生应用程序⑤物联网开发程序⑥人工智能⑦游戏开发。未来.NET Framework将和.NET Core合二为一统称.NET。故现在学习.NET Core貌似是正确的选择，毕竟跨平台。至于编程语言就选定“太子”C#。<br><br>近期的计划是突击Web端程序开发，及.NET Core中Asp.net Core框架。第一步基于传统MVC架构的Web应用，在之后尝尝鲜，基于Razor Pages的Web开发、交互式客户端 Web UI 的框架Blazor、数据访问EF Core，Web API、实时应用、远程过程调用应用就是后事了。万事开头难，尤其我对于B/S后端开发知之甚少，堪称绝对“小白”。<br><br>在之后的博客中，我会重点记录下，学习C#和ASP.NET Core MVC Web开发的点点滴滴Kindle时刻。希望持之以恒，逐步积累，提升技术硬实力。<br><br>It’s time to learn. 就先从ASP.NET Core开始，学习构建MVC架构的Web项目。<br></p><h5 id="ASP-NET-Core的启动过程"><a href="#ASP-NET-Core的启动过程" class="headerlink" title="ASP.NET Core的启动过程"></a>ASP.NET Core的启动过程</h5><p><img src="/images/Startup.png" alt="ASP.NET Core的启动过程"></p><h5 id="DependencyInjection-依赖注入框架"><a href="#DependencyInjection-依赖注入框架" class="headerlink" title="DependencyInjection/依赖注入框架"></a>DependencyInjection/依赖注入框架</h5><p><img src="/images/DependencyInjection.png" alt="内置依赖注入框架"></p>]]></content>
      
      
      <categories>
          
          <category> Learning </category>
          
      </categories>
      
      
        <tags>
            
            <tag> .NET </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>将编程作为一种业余爱好</title>
      <link href="/2020/03/06/%E5%B0%86%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%BA%E4%B8%80%E7%A7%8D%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/"/>
      <url>/2020/03/06/%E5%B0%86%E7%BC%96%E7%A8%8B%E4%BD%9C%E4%B8%BA%E4%B8%80%E7%A7%8D%E4%B8%9A%E4%BD%99%E7%88%B1%E5%A5%BD/</url>
      
        <content type="html"><![CDATA[<p>好久没写博客了，先来介绍下此博客的现状：博客系统还是hexo提供，只不过部署系统由原来的Github Pages转为阿里云ECS，另外域名也由之前的二级域名 <a href="http://hschen.top">hschen.top</a>转而三级域名 <a href="http://blog.hschen.top" target="_blank" rel="noopener">blog.hschen.top</a>。前者是因为之前访问速度过于缓慢，后者则是由于博客系统的大众化促使我思考该构建怎样一个应用可以发挥技术的最大价值。之前记录的博文实属不堪，汇总到 <a href="https://blog.hschen.top/history.html" target="_blank" rel="noopener">历史</a> 页面，是时候有个新的开始了。</p><a id="more"></a><p>自大学开始接触编程，课内课外前前后后接触了不少技术，仅就编程语言而言有C、C++、C#、HTML/CSS、Javascript、Java、Python、PHP和Shell、SQL。可构建的程序包括桌面端、移动端、Web端应用以及系统运维方面。在此作简单回忆：C和C++前期一直是用作练习语言基础和算法的工具，可惜，没投入足够的时间，尽管之后重拾信息再次学习也往往半途而废（学习C++也是学习面向对象编程的开始，为之后深入学习编程埋下伏笔）。初次接触桌面端程序是使用C++的MFC框架构建的，此时还没有使用到数据库，但实现的还是CURD，编程过程就是往返于实验室和图书馆，东抄抄西搬搬，整个一豆腐渣工程。在之后就是学习前端知识，刚开始天真的以为仅HTML和CSS就可以实现整个web应用，于是耗费大量时间跟着网上的教程“大礼包”实现了一个前端页面，当时觉得颇为有趣，现在看来真是走错了路。再然后便是基于C#语言的.NET FrameWork构建Windows平台的桌面程序，在此过程中接触到SQL Server数据库，虽然有部分提及到网络Socket编程，但总体还是CURD。学校开设的第一堂Java课，我并没有参加，当时只觉得选Java不怎么“酷”。当然现实打了我的脸,错误的认为编程语言课只教授语言层次，殊不知老师还会提及其生态。于是下学期教授Java Web时，我便迅速参加，课堂上老师会介绍有关Web程序的方方面面，比如get、post,cookie,session等相关浏览器领域知识，还有MySql数据库等等B/S系统应该注意的地方。有关Java，后期跟着学校选修了Android，先是跟着谷歌官方文档走了半截，然后是老师的教授，课堂结束，仍旧浅尝辄止无所获。学校未教授Python的课程，于是很多同学在业余时间学习，我也不例外在语言语法关过后，先后了解过Python爬虫、Web端开发，也没有深入。我想学习一门新语言，想要快速牢靠的掌握，还得通过刷题巩固，而不是直接前往应用的大门。再之后，学校教程PHP我仍然没有选，课程同时涉及了云服务器部署及Git版本控制系统，其实有点遗憾。不过对应学期的Oracle数据库课程设计，倒是使用了PHP,仍旧是网上教程看着打下来的。到目前为止，与入学伊始的种种幻想都渐行渐远，逻辑什么的令人头痛，说实话我也没有勇气认真对待，付出百分百的精神去面对过这一切。作为一名计算机科班学生，实属遗憾。<br><br>那不做开发，毕业后又怎么就业？通过网上资料查询，我了解到运维，包括网络运维、系统运维、数据库运维以及大数据云计算，与开发一一对应的岗位。同时了解到相关的职业认证和系统知识，颇为复杂。思索一番，投身于Linux系统运维，此为后事，暂且不叙。<br><br>临近毕业，碍于毕业设计，必须重新扛起开发的大旗，前后辗转，做出决定 - - 将编程作为一种业余爱好。这样压力会小一点，仅此而已。至于技术栈就选择.NET，接下来先打牢C#的基础，然后学习.net core方面asp.net core MVC web应用。过程中最好能够重新学习下数据结构和算法，多多刷题，培养自己的逻辑能力。再然后充分利用.net core平台的优越性发展各类应用程序技能，无论桌面端、移动端、web端，云计算、物联网还是大数据、AI，也不枉我所谓科班。任重道远，切记不可半途而废。</p>]]></content>
      
      
      <categories>
          
          <category> Overview </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
